Explanation : list is empty, in which case it returns the other list because there’s nothing left to merge. Then, it compares the values at the current nodes of both lists: if the value of the first list’s node is less than or equal to the second’s, it sets that node’s next pointer to the result of merging the rest of the first list with the second list, effectively placing it at the front, and returns it; otherwise, it does the opposite by linking the second list’s current node to the merged result of the first list and the remainder of the second list. This process continues recursively until the end of one list is reached, resulting in a fully merged, sorted linked list.

Code : 

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL){
            return list2;
        }
        else if(list2== NULL){
            return list1;
        }
        if(list1->val<=list2->val){
            list1->next = mergeTwoLists(list1->next, list2);
            return list1;
        }
        else {
            list2->next = mergeTwoLists(list1,list2->next);
            return list2;
        }

    }
};
